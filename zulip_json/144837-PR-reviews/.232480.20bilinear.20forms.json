[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> has made a really nice PR with the definition of bilinear forms. At some point in the theory, you need to konw that <code>2</code> is invertible in the base ring. We need to make a design choice here. I would like to have some more eyes and brains on this code. Will the current approach play well, or should we try something else?</p>",
        "id": 194963719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587576040
    },
    {
        "content": "<p>½ is such a fundamental thing. Maybe it even makes sense to add a type class specifically for this.</p>",
        "id": 194972204,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587579997
    },
    {
        "content": "<p>I agree. Characteristic different from <code>2</code> is an assumption that shows up really often (notably when dealing with quadratic forms :)</p>",
        "id": 194972814,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1587580306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232480.20bilinear.20forms/near/194972204\" title=\"#narrow/stream/144837-PR-reviews/topic/.232480.20bilinear.20forms/near/194972204\">said</a>:</p>\n<blockquote>\n<p>½ is such a fundamental thing. Maybe it even makes sense to add a type class specifically for this.</p>\n</blockquote>\n<p>I like the notation!</p>",
        "id": 194973202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587580468
    },
    {
        "content": "<p>½ or <code>2 ≠ 0</code>?</p>",
        "id": 194982845,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587585124
    },
    {
        "content": "<p>Probably ½</p>",
        "id": 194982889,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587585149
    },
    {
        "content": "<p>You need ½ for this quadratic forms business (e.g., Z[½] is fine even though it's not a field, but Z is not even though 2 ≠ 0). But it's not clear to me how to organize it with respect to the algebraic hierarchy.</p>",
        "id": 194983593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587585489
    },
    {
        "content": "<p>I mean, obviously you need some axioms about ½</p>",
        "id": 194983638,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587585509
    },
    {
        "content": "<p><code>is_unit 2</code>?</p>",
        "id": 194984876,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587586090
    },
    {
        "content": "<p>Or <code>½ * 2 = 2 * ½ = 1</code> if we want to allow computable instances (probably yes).</p>",
        "id": 194984942,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587586128
    },
    {
        "content": "<p>So, maybe we add <code>has_half</code> as a class that only captures the data of the term and enables the notation (like <code>has_zero</code> and <code>has_one</code>) and another class</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">two_invertible</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">has_half</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">half_mul_two</span> <span class=\"o\">:</span> <span class=\"err\">½</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">two_mul_half</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"err\">½</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>What do people think of this idea? (In particular, I'd like to know what <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> thinks.)</p>",
        "id": 195017190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587615189
    },
    {
        "content": "<p>(I don't know if <code>semiring R</code> can be weakened... you need <code>1</code>, <code>2</code> and <code>*</code>. So you probably need <code>has_one</code>, <code>has_mul</code> and <code>has_add</code>? Maybe also <code>has_zero</code>?</p>",
        "id": 195017253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587615268
    },
    {
        "content": "<p>Why not parameterize this over <code>2</code>?</p>",
        "id": 195017915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587616259
    },
    {
        "content": "<p>like <code>invertible a</code> for numeral <code>a</code></p>",
        "id": 195017922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587616272
    },
    {
        "content": "<p>I'm not a fan of the notation though. It's a bit hard to see in a monospace font</p>",
        "id": 195017932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587616315
    },
    {
        "content": "<p>plus it's yet another way to express this constant, making simp normal form more complicated</p>",
        "id": 195017987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587616377
    },
    {
        "content": "<p>I like the idea of parametrising. We need a \"characteristic does not divide the order of G\" class, and <code>invertible (fintype.card G)</code> seems pretty good.</p>",
        "id": 195018195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587616687
    },
    {
        "content": "<p>Is there any reasonable definition of <code>has_div</code> for Z[1/2] that does some suitable truncation?</p>",
        "id": 195018199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587616692
    },
    {
        "content": "<p>I would really like to be able to use <code>1 / 2</code> if possible. <code>rat.cast</code> already does division by zero sometimes if you are in a ring with the wrong characteristic</p>",
        "id": 195018292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587616839
    },
    {
        "content": "<p>I would propose <code>(a * 2^b) / (c * 2^d)</code> (where a and c are odd) evaluates to <code>2^(b-d) * (a / c)</code> with the division evaluated in Z</p>",
        "id": 195018574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587617301
    },
    {
        "content": "<p>that should give the correct result in all reasonable cases, returns 0 on division by 0, and is a kind of p-adic approximation otherwise</p>",
        "id": 195018593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587617378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> So what would your definition of <code>invertible a</code> be? If you want to be able to compute with it (which seems useful, say over finite fields, or the rationals), then we need to record data. But that means that over a generic field of characteristic zero, there will be \"another way\" to express the constant <code>ainv</code>.</p>",
        "id": 195022397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587623232
    },
    {
        "content": "<p>Or can that be avoided?</p>",
        "id": 195022402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587623243
    },
    {
        "content": "<p>it's just proof relevant <code>is_unit</code></p>",
        "id": 195022407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623262
    },
    {
        "content": "<p>I actually thought this already existed</p>",
        "id": 195022416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623278
    },
    {
        "content": "<p>We have <code>units R</code></p>",
        "id": 195022470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587623286
    },
    {
        "content": "<p>But I still don't follow how you want to avoid the extra way of expressing <code>1/a</code>.</p>",
        "id": 195022481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587623319
    },
    {
        "content": "<p>well I want to use <code>has_div</code> to write it, although that is probably an \"extra way\" no matter how you slice it</p>",
        "id": 195022492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623357
    },
    {
        "content": "<p>In general you will not have <code>has_div</code> or <code>has_inv</code> on the ring you are interested in. (Say <code>polynomial (zmod p)</code>)</p>",
        "id": 195022504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587623370
    },
    {
        "content": "<p>There is always a way to define it, although it might be noncomputable</p>",
        "id": 195022520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623398
    },
    {
        "content": "<p>But I'm not sure if we want to go noncomputable here.</p>",
        "id": 195022570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587623418
    },
    {
        "content": "<p>the main important thing is that the function actually has a unique answer, i.e. no rings where there are two candidates for 1/2</p>",
        "id": 195022574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623427
    },
    {
        "content": "<p>but I think this is impossible in some relatively high generality</p>",
        "id": 195022590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623454
    },
    {
        "content": "<p>that is, <code>a + a = b + b</code> implies <code>a = b</code></p>",
        "id": 195022606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623487
    },
    {
        "content": "<p>If <code>(1/2) * 2 = 1</code> and <code>2 * (1/2) = 1</code>, then <code>(1/2)</code> is unique</p>",
        "id": 195022672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587623537
    },
    {
        "content": "<p>yeah, at least in semirings it works</p>",
        "id": 195022680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623554
    },
    {
        "content": "<p>Which is good enough, I guess?</p>",
        "id": 195022696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587623572
    },
    {
        "content": "<p>But I think that either you are working in a concrete ring, in which case you can set up <code>1 / 2</code> to refer to this element if it exists, or you are in some general situation and you can posit the existence of such an element using <code>invertible 2</code></p>",
        "id": 195022728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623634
    },
    {
        "content": "<p>maybe even skipping the notation, just <code>u : units R</code> and <code>u = 2</code></p>",
        "id": 195022781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623674
    },
    {
        "content": "<p>Given an instance of <code>invertible 2</code>, how do you want to refer to the element that is the inverse of <code>2</code>?</p>",
        "id": 195022804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587623702
    },
    {
        "content": "<p><code>invertible.inv 2</code> presumably</p>",
        "id": 195022825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623732
    },
    {
        "content": "<p>or <code>I.inv</code> where <code>I : invertible 2</code> if it's not a class</p>",
        "id": 195022831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623750
    },
    {
        "content": "<p>And what would the definition of <code>I.inv x</code> be?</p>",
        "id": 195022864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587623763
    },
    {
        "content": "<p>pull it out of the struct</p>",
        "id": 195022875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623771
    },
    {
        "content": "<p>Ok, so <code>invertible 2</code> records data? It's not a <code>Prop</code>. Or am I misunderstanding you?</p>",
        "id": 195022893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587623805
    },
    {
        "content": "<p>no props</p>",
        "id": 195022895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623811
    },
    {
        "content": "<p><code>is_unit</code> is already around if you want the prop</p>",
        "id": 195022914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587623842
    },
    {
        "content": "<p>Yup, certainly</p>",
        "id": 195022919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587623851
    },
    {
        "content": "<p>I think I would like <code>invertible</code> to be a class, and I think I would like to have notation for <code>invertible.inv</code>.</p>",
        "id": 195022995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587623910
    },
    {
        "content": "<p>I can't think of anything good, so perhaps a local notation using your funny 1/2 symbol will suffice</p>",
        "id": 195023180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587624148
    },
    {
        "content": "<p>I like <code>⅟</code> <a href=\"https://en.wiktionary.org/wiki/%E2%85%9F\" title=\"https://en.wiktionary.org/wiki/%E2%85%9F\">https://en.wiktionary.org/wiki/%E2%85%9F</a></p>",
        "id": 195023570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587624621
    },
    {
        "content": "<p>Admittedly, this seems to depend on your font a bit, but <code>⅟2</code> and <code>⅟n</code> seem to read okish.</p>",
        "id": 195023593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587624671
    },
    {
        "content": "<p>It's better in the Zulip \"write-your-post\" window, then when it's rendered after posting.</p>",
        "id": 195023620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587624713
    },
    {
        "content": "<p>Can we prove that <code>1/2</code> is unique?</p>",
        "id": 195023683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587624776
    },
    {
        "content": "<p>Depends on your axioms</p>",
        "id": 195023699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587624806
    },
    {
        "content": "<p>can we construct a semiring with two <code>1/2</code>s?</p>",
        "id": 195023711,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587624829
    },
    {
        "content": "<p>What are your axioms on <code>1/2</code>?</p>",
        "id": 195023774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587624888
    },
    {
        "content": "<p>2(1/2) = 1</p>",
        "id": 195023778,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587624898
    },
    {
        "content": "<p>Is it a bi-inverse? Or only one-sided?</p>",
        "id": 195023781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587624902
    },
    {
        "content": "<p>oh no</p>",
        "id": 195023788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587624907
    },
    {
        "content": "<p>I didn't realized it wasn't commutative</p>",
        "id": 195023792,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587624916
    },
    {
        "content": "<p>Your semiring? It is always noncommutative. Only rings are commutative.</p>",
        "id": 195023807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587624937
    },
    {
        "content": "<p>is there a semiring with left 1/2 but not right 1/2?</p>",
        "id": 195023832,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587624956
    },
    {
        "content": "<p>I guess Z&lt;X&gt;/(2X-1) or something like that</p>",
        "id": 195023876,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587624969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> In a commutative setup <code>coe : units R → R</code> is injective. Lean knows this.</p>",
        "id": 195023878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587624970
    },
    {
        "content": "<p>(removed)</p>",
        "id": 195023891,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587624985
    },
    {
        "content": "<p>Exactly, so I suppose we require that it is a bi-inverse.</p>",
        "id": 195023905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587624999
    },
    {
        "content": "<p>do we have R&lt;X&gt;?</p>",
        "id": 195023917,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587625017
    },
    {
        "content": "<p>Do we want it?</p>",
        "id": 195023932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587625035
    },
    {
        "content": "<p>I don't even know where to start if not do it completely stupidly (quotient of inductive)</p>",
        "id": 195023941,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587625040
    },
    {
        "content": "<p>what's the other stupid construction that makes it live one universe higher?</p>",
        "id": 195024122,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587625191
    },
    {
        "content": "<p>using the universal property Hom(R&lt;X&gt;,S) = S</p>",
        "id": 195024181,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587625211
    },
    {
        "content": "<p>I think <code>2*x = x+x = x*2</code> holds in any semiring?</p>",
        "id": 195024349,
        "sender_full_name": "David Wärn",
        "timestamp": 1587625372
    },
    {
        "content": "<p>oh right</p>",
        "id": 195024370,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587625403
    },
    {
        "content": "<p>ok that also implies unicity</p>",
        "id": 195024394,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587625425
    },
    {
        "content": "<p>Hooray! Thanks for that observation <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span></p>",
        "id": 195024446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587625448
    },
    {
        "content": "<p>yeah, every <code>\\u (n : nat)</code> is in the center of the ring</p>",
        "id": 195024779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587625745
    },
    {
        "content": "<p>I don't think the mathematicians here care about non-commutative rings</p>",
        "id": 195024860,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587625807
    },
    {
        "content": "<p>well they need to get over it because they will in 6 months</p>",
        "id": 195024878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587625827
    },
    {
        "content": "<p>what's happening in 6 months?</p>",
        "id": 195024891,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587625852
    },
    {
        "content": "<p>they decide to work on something that needs noncommutative rings</p>",
        "id": 195024920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587625876
    },
    {
        "content": "<p>and then we have to do a big refactoring project</p>",
        "id": 195024943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587625900
    },
    {
        "content": "<p>Group rings are coming</p>",
        "id": 195025847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587626577
    },
    {
        "content": "<p>And if the group is finite (an important special case, even if you're interested in the Langlands philosophy, because Galois groups are a limit of finite groups) then you'll want to be able to say \"and assume the order of the group is invertible in the base field\"</p>",
        "id": 195025979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587626689
    },
    {
        "content": "<p>So the consensus until now seems to favour an <code>invertible a</code> typeclass, which is also my preferred option.</p>",
        "id": 195027977,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1587628326
    },
    {
        "content": "<p>My suggestion is to decouple the proposition from the notation, i.e. have a <code>has_inv_of a</code> class which provides <code>inv_of a</code> (notation: <code>⅟ a</code>?) and <code>invertible a</code> which asserts the relevant equation(s). Perhaps split it into <code>left_invertible</code> and <code>right_invertible</code>?</p>",
        "id": 195027986,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1587628342
    },
    {
        "content": "<p>I'm not sure we need a notation typeclass for this</p>",
        "id": 195028007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587628368
    },
    {
        "content": "<p>I would be happy to attach the notation simply to the lawful <code>invertible a</code> typeclass</p>",
        "id": 195028029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587628389
    },
    {
        "content": "<p>I'm thinking that inverses come up in cases where the operation is not <code>*</code>, e.g. for a matrix or for an arrow in a category</p>",
        "id": 195028065,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1587628420
    },
    {
        "content": "<p>I think once you get to <code>left_invertible</code> or things other than <code>*</code>, you should just have a hypothesis</p>",
        "id": 195028117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587628448
    },
    {
        "content": "<p>we aren't even abbreviating much at this point</p>",
        "id": 195028134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587628464
    },
    {
        "content": "<p>For me the main point of a typeclass in this area is to be able to talk about \"a field of characteristic not equal to 2 or 3\" when the inverses to 2 and 3 are not the focus of the theorem</p>",
        "id": 195028171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587628521
    }
]