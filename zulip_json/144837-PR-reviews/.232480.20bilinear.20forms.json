[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> has made a really nice PR with the definition of bilinear forms. At some point in the theory, you need to konw that <code>2</code> is invertible in the base ring. We need to make a design choice here. I would like to have some more eyes and brains on this code. Will the current approach play well, or should we try something else?</p>",
        "id": 194963719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587576040
    },
    {
        "content": "<p>½ is such a fundamental thing. Maybe it even makes sense to add a type class specifically for this.</p>",
        "id": 194972204,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587579997
    },
    {
        "content": "<p>I agree. Characteristic different from <code>2</code> is an assumption that shows up really often (notably when dealing with quadratic forms :)</p>",
        "id": 194972814,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1587580306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232480.20bilinear.20forms/near/194972204\" title=\"#narrow/stream/144837-PR-reviews/topic/.232480.20bilinear.20forms/near/194972204\">said</a>:</p>\n<blockquote>\n<p>½ is such a fundamental thing. Maybe it even makes sense to add a type class specifically for this.</p>\n</blockquote>\n<p>I like the notation!</p>",
        "id": 194973202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587580468
    },
    {
        "content": "<p>½ or <code>2 ≠ 0</code>?</p>",
        "id": 194982845,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587585124
    },
    {
        "content": "<p>Probably ½</p>",
        "id": 194982889,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587585149
    },
    {
        "content": "<p>You need ½ for this quadratic forms business (e.g., Z[½] is fine even though it's not a field, but Z is not even though 2 ≠ 0). But it's not clear to me how to organize it with respect to the algebraic hierarchy.</p>",
        "id": 194983593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587585489
    },
    {
        "content": "<p>I mean, obviously you need some axioms about ½</p>",
        "id": 194983638,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587585509
    },
    {
        "content": "<p><code>is_unit 2</code>?</p>",
        "id": 194984876,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587586090
    },
    {
        "content": "<p>Or <code>½ * 2 = 2 * ½ = 1</code> if we want to allow computable instances (probably yes).</p>",
        "id": 194984942,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587586128
    },
    {
        "content": "<p>So, maybe we add <code>has_half</code> as a class that only captures the data of the term and enables the notation (like <code>has_zero</code> and <code>has_one</code>) and another class</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">two_invertible</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">has_half</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">half_mul_two</span> <span class=\"o\">:</span> <span class=\"err\">½</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">two_mul_half</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"err\">½</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>What do people think of this idea? (In particular, I'd like to know what <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> thinks.)</p>",
        "id": 195017190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587615189
    },
    {
        "content": "<p>(I don't know if <code>semiring R</code> can be weakened... you need <code>1</code>, <code>2</code> and <code>*</code>. So you probably need <code>has_one</code>, <code>has_mul</code> and <code>has_add</code>? Maybe also <code>has_zero</code>?</p>",
        "id": 195017253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587615268
    },
    {
        "content": "<p>Why not parameterize this over <code>2</code>?</p>",
        "id": 195017915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587616259
    },
    {
        "content": "<p>like <code>invertible a</code> for numeral <code>a</code></p>",
        "id": 195017922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587616272
    },
    {
        "content": "<p>I'm not a fan of the notation though. It's a bit hard to see in a monospace font</p>",
        "id": 195017932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587616315
    },
    {
        "content": "<p>plus it's yet another way to express this constant, making simp normal form more complicated</p>",
        "id": 195017987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587616377
    },
    {
        "content": "<p>I like the idea of parametrising. We need a \"characteristic does not divide the order of G\" class, and <code>invertible (fintype.card G)</code> seems pretty good.</p>",
        "id": 195018195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587616687
    },
    {
        "content": "<p>Is there any reasonable definition of <code>has_div</code> for Z[1/2] that does some suitable truncation?</p>",
        "id": 195018199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587616692
    },
    {
        "content": "<p>I would really like to be able to use <code>1 / 2</code> if possible. <code>rat.cast</code> already does division by zero sometimes if you are in a ring with the wrong characteristic</p>",
        "id": 195018292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587616839
    },
    {
        "content": "<p>I would propose <code>(a * 2^b) / (c * 2^d)</code> (where a and c are odd) evaluates to <code>2^(b-d) * (a / c)</code> with the division evaluated in Z</p>",
        "id": 195018574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587617301
    },
    {
        "content": "<p>that should give the correct result in all reasonable cases, returns 0 on division by 0, and is a kind of p-adic approximation otherwise</p>",
        "id": 195018593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587617378
    }
]