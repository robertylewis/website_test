[
    {
        "content": "<p>I'm trying to prove the following lemma:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">radical_vanishing_ideal_zero_locus</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">vanishing_ideal</span> <span class=\"o\">(</span><span class=\"n\">zero_locus</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">radical</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>but lean is giving me a type error at <code>zero_locus</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">zero_locus</span> <span class=\"n\">I</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">I</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</pre></div>\n\n\n<p>This is puzzling to me because <code>zero_locus I</code> for an ideal <code>I</code> seems to type check when used in <code>prime_spectrum.lean</code> in mathlib</p>",
        "id": 195152391,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1587711694
    }
]